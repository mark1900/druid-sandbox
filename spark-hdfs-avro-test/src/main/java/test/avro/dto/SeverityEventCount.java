/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package test.avro.dto;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SeverityEventCount extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SeverityEventCount\",\"namespace\":\"test.avro.dto\",\"fields\":[{\"name\":\"level\",\"type\":\"int\"},{\"name\":\"count\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int level;
  @Deprecated public int count;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public SeverityEventCount() {}

  /**
   * All-args constructor.
   */
  public SeverityEventCount(java.lang.Integer level, java.lang.Integer count) {
    this.level = level;
    this.count = count;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return level;
    case 1: return count;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: level = (java.lang.Integer)value$; break;
    case 1: count = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'level' field.
   */
  public java.lang.Integer getLevel() {
    return level;
  }

  /**
   * Sets the value of the 'level' field.
   * @param value the value to set.
   */
  public void setLevel(java.lang.Integer value) {
    this.level = value;
  }

  /**
   * Gets the value of the 'count' field.
   */
  public java.lang.Integer getCount() {
    return count;
  }

  /**
   * Sets the value of the 'count' field.
   * @param value the value to set.
   */
  public void setCount(java.lang.Integer value) {
    this.count = value;
  }

  /** Creates a new SeverityEventCount RecordBuilder */
  public static test.avro.dto.SeverityEventCount.Builder newBuilder() {
    return new test.avro.dto.SeverityEventCount.Builder();
  }
  
  /** Creates a new SeverityEventCount RecordBuilder by copying an existing Builder */
  public static test.avro.dto.SeverityEventCount.Builder newBuilder(test.avro.dto.SeverityEventCount.Builder other) {
    return new test.avro.dto.SeverityEventCount.Builder(other);
  }
  
  /** Creates a new SeverityEventCount RecordBuilder by copying an existing SeverityEventCount instance */
  public static test.avro.dto.SeverityEventCount.Builder newBuilder(test.avro.dto.SeverityEventCount other) {
    return new test.avro.dto.SeverityEventCount.Builder(other);
  }
  
  /**
   * RecordBuilder for SeverityEventCount instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SeverityEventCount>
    implements org.apache.avro.data.RecordBuilder<SeverityEventCount> {

    private int level;
    private int count;

    /** Creates a new Builder */
    private Builder() {
      super(test.avro.dto.SeverityEventCount.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(test.avro.dto.SeverityEventCount.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.level)) {
        this.level = data().deepCopy(fields()[0].schema(), other.level);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.count)) {
        this.count = data().deepCopy(fields()[1].schema(), other.count);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing SeverityEventCount instance */
    private Builder(test.avro.dto.SeverityEventCount other) {
            super(test.avro.dto.SeverityEventCount.SCHEMA$);
      if (isValidValue(fields()[0], other.level)) {
        this.level = data().deepCopy(fields()[0].schema(), other.level);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.count)) {
        this.count = data().deepCopy(fields()[1].schema(), other.count);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'level' field */
    public java.lang.Integer getLevel() {
      return level;
    }
    
    /** Sets the value of the 'level' field */
    public test.avro.dto.SeverityEventCount.Builder setLevel(int value) {
      validate(fields()[0], value);
      this.level = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'level' field has been set */
    public boolean hasLevel() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'level' field */
    public test.avro.dto.SeverityEventCount.Builder clearLevel() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'count' field */
    public java.lang.Integer getCount() {
      return count;
    }
    
    /** Sets the value of the 'count' field */
    public test.avro.dto.SeverityEventCount.Builder setCount(int value) {
      validate(fields()[1], value);
      this.count = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'count' field has been set */
    public boolean hasCount() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'count' field */
    public test.avro.dto.SeverityEventCount.Builder clearCount() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public SeverityEventCount build() {
      try {
        SeverityEventCount record = new SeverityEventCount();
        record.level = fieldSetFlags()[0] ? this.level : (java.lang.Integer) defaultValue(fields()[0]);
        record.count = fieldSetFlags()[1] ? this.count : (java.lang.Integer) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
